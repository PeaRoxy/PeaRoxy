{"name":"PeaRoxy","tagline":"Complete solution for bypassing any firewall system","body":"# Welcome to PeaRoxy Project's Website\r\nPeaRoxy is a complete solution for bypassing any firewall or restriction. Possible usage of PeaRoxy are:\r\n* Accessing to free internet in school/work\r\n* Accessing free internet in countries with strict filtering/censorship systems.\r\n* Bypassing any firewall limiting access to certain Domains/IPs or Ports\r\n* Bypassing any limitation based on your geo-ip\r\n* Transferring information with encryption in unsafe networks\r\n\r\n## Why PeaRoxy?\r\nThere are lot of other solutions out there. PPTP, L2TP. OpenVPN, SOCKS, Http Proxy and so on. Yet there all have their own disadvantages. First of all, none of them designed to be undetectable.\r\nPPTP and L2TP are using known ports and can be blocked easily by firewalls. HTTP and HTTPS proxies are not encrypted and a firewall can block site through them same way as it do with normal connections. OpenVPN and similar projects has a special protocol or using SSL as a method for encryption and both ways are block-able with a content-filtering and protocol-filtering firewalls.\r\nPeaRoxy developed with the idea to make an unblock-able, open-source and easy to use application for bypassing any firewall.\r\n\r\n## What is PeaRoxy?\r\nPeaRoxy is a complete solution for bypassing firewalls. It has a WPF Windows based client and different type of servers. MacOSX and Linux clients are in to-do list. \r\nLike other solutions it has a server application that can be executed on Windows operating systems with .Net4 and on Linux and OSX using Mono. This, of-course give users best experience, yet not all users have a dedicated system to run their own server.\r\nOther types of server are ASPear and PHPear servers. These light-weight servers are based on Aspx.Net and PHP for handling HTTP and HTTPS traffics coming from PeaRoxy client.\r\n\r\n## How Secure is PeaRoxy?\r\nPeaRoxy has it's own protocol; this protocol supports encryption with two method and in two direction. Each user and each client has their own settings for encryption. In other word both server and client are responsible for data they send to other side.\r\nActually reason of this type of design is that, PeaRoxy never designed to be safe. It is designed to be lightweight and un-detectable and keeping these goals in mind show us that in lot of cases there is no need for encryption from server side and this can slow server down too. So it is server that can decide whenever it wants to send encrypted data to clients or not. But at same time user can change settings for uploads to prevent detecting of uploading data.\r\nCurrently servers can reject encryption/compression but there is no option for this behavior in client application. We have it in our to-do list.\r\n\r\nTwo available methods for encryption are SimpleXOR and TripleDES. SimpeXOR is easily breakable for a expert hacker and mainly developed to confuse firewalls and content-filtering systems, yet TripleDES is lot more stronger, but it is slower and use more resource.\r\n\r\nPeaRoxy also supports compression of data using gZip and Deflate.\r\n\r\n## Features\r\n### PeaRoxy Protocol\r\n* Encryption of data\r\n* Compression of data\r\n* HTTP forger to confuse firewalls\r\n\r\n### Windows WPF Client\r\n* Supports PeaRoxy, PHPear, ASPear, SOCKS 4/5 and HTTPS as server\r\n* Supports grabbing of data using a virtual network adapter (OpenVPN driver)\r\n* Supports communicating with other applications through HTTP, HTTPS and SOCKS\r\n* SmartPear and Anti-DNSGrabber which forward traffic through tunnel only of access to domain/ip/port was blocked through direct connection\r\n* Automatic Configuration Script generator\r\n* Local DNS resolver\r\n* User Friendly and Interactive UI\r\n* Error reporting through browser\r\n\r\n### PeaRoxy Server\r\n* Supporting Windows, Linux and OSX\r\n* Possibility to route unrelated data to other domains and ports\r\n* Full support for encryption and compression\r\n* Full support for outgoing connections: HTTP, HTTPS and TCP Socket\r\n* Possibility to force users to authenticate\r\n\r\n### ASPear and PHPear Servers (ASPear is not available now)\r\n* Supporting HTTP and HTTPS connections\r\n* Supporting SimpleXOR encryption (And TripleDES in ASPear)\r\n* No shell access needed\r\n* Unique protocol and yet Undetectable\r\n* Possibility to force users to authenticate\r\n\r\n### To Do\r\n* PeaRoxy Client: Possibility to reject encryption and compression from server\r\n* PeaRoxy Client: Auto update of application and SmartPear list\r\n* PeaRoxy Client: Popup screen in first run to select desired setting easily\r\n* PeaRoxy Client: New grabbers, Hook into applications and LSP module\r\n* PeaRoxy Client: Adding new server type\r\n* ASPear: Completing ASPX.Net code\r\n* Project: Adding new server type\r\n* Project: Online database for active servers and possibility to select a random Open server for using free internet without configuring a server manually\r\n\r\n\r\n## Support or Contact\r\n* You can report any problem and ask for help about PeaRoxy via \"Issue\" page in GitHub: [Project's Issues](https://github.com/PeaRoxy/PeaRoxy/issues)\r\n* You can contact me by sending private messages to my user in GitHub: @PeaRoxy\r\n* You can learn more by visiting project's wiki in GitHub, which is not of-course completed yet: [Project's Wiki](https://github.com/PeaRoxy/PeaRoxy/wiki)\r\n\r\n## Responsibilities\r\nAuthor and Developer of this project has no responsibility about how and why peoples use this application.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}